#! /usr/bin/env node --harmony_arrow_functions --harmony_rest_parameters

/* eslint no-console: 0 */
'use strict';

let fs             = require('fs');
let path           = require('path');
let d              = require('debug')('bin');
let args           = require('minimist')(process.argv.slice(2));

let parse          = require('../src/core/parser');
let stdlib         = require('../src/core/lib/stdlib');
let interpret      = require('../src/core/interpreter2');
let createScope    = require('../src/core/scope2').createScope;
let filePathSymbol = require('../src/core/scope2').filePathSymbol;

const sourceString = args.e || args.E ? args.e || args.E : fs.readFileSync(args._[0], {encoding: 'utf-8'});
const filePath     = args.e || args.E ? process.cwd() : path.dirname(path.resolve(process.cwd(), args._[0]));

function createInitialScope(defaultLib, fPath) {
  return createScope(defaultLib).set(filePathSymbol, fPath);
}

try {
  if (args.ast) console.log(JSON.stringify(parse(sourceString), null, 4));
  else {
    let returnVal = interpret(
      createInitialScope(stdlib, filePath),
      parse(sourceString)
    );

    d('Return val: %o', returnVal);
  }

}
catch (e) {
  if (e.offset) {
    console.error('Parse error:', e.message);
    console.error('    Offset: %d Line: %d Column: %d', e.offset, e.line, e.column);
    console.error('    Expected: %s\n    Found: %s', e.expected.map(v => v.description).join(', '), e.found);
    process.exit(1);
  }
  throw e;
}
